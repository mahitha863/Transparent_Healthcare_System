/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.THCSDataCollectorRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.THCSEnterprise;
import Business.HealthCost.HealthCost;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.Organization.THCSDataCollectorOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.HospitalInfoWorkRequest;
import java.awt.CardLayout;
import java.awt.Component;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Set;
import java.util.TreeMap;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author Gaya 3
 */
public class HealthCostsDirectoryJPanel extends javax.swing.JPanel {
    
    private JPanel userProcessContainer;
    private EcoSystem business;
    private Network network;
    private UserAccount userAccount;
    private THCSDataCollectorOrganization dcOrganization;
    private THCSEnterprise thcsEnterprise; 
    

    /**
     * Creates new form DataCollectorWorkAreaJPanel
     */
    public HealthCostsDirectoryJPanel(JPanel userProcessContainer, UserAccount account, Organization organization, EcoSystem business, Enterprise enterprise, Network network) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.business = business;
        this.network = network;
        this.dcOrganization = (THCSDataCollectorOrganization)organization;
        this.thcsEnterprise = (THCSEnterprise)enterprise;
        
        populateTable();
        
    }
    
    public void populateTable(){
        DefaultTableModel model = (DefaultTableModel)HealthCostTable.getModel();
        
        model.setRowCount(0);
        
        for(HealthCost hc : thcsEnterprise.getHcDirectory()){
            Object[] row = new Object[8];
            row[0] = hc.getHospitalName();
            row[1] = hc.getHospitalLocation();
            row[2] = hc.getConsultationFee();
            row[3] = hc.getMriCost();
            row[4] = hc.getEegCost();
            row[5] = hc.getEcgCost();
            row[6] = hc.getxRayCost();
            row[7] = hc.getHeartBypassSurgery();
            
            model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        HealthCostTable = new javax.swing.JTable();
        createNewPatientDataJButton = new javax.swing.JButton();
        updateJButton = new javax.swing.JButton();
        deleteJButton = new javax.swing.JButton();
        RefreshJButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        backBtn = new javax.swing.JButton();
        btnExportData = new javax.swing.JButton();
        viewBtn = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 153, 204));

        HealthCostTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Hospital Name", "Location", "Consultation fee", "MRI", "EEG", "ECG", "X-Ray", "Heart Bypass Surgery"
            }
        ));
        jScrollPane1.setViewportView(HealthCostTable);

        createNewPatientDataJButton.setBackground(new java.awt.Color(255, 255, 255));
        createNewPatientDataJButton.setText("Create Health Cost Record");
        createNewPatientDataJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createNewPatientDataJButtonActionPerformed(evt);
            }
        });

        updateJButton.setBackground(new java.awt.Color(255, 255, 255));
        updateJButton.setText("Update");
        updateJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateJButtonActionPerformed(evt);
            }
        });

        deleteJButton.setBackground(new java.awt.Color(255, 255, 255));
        deleteJButton.setText("Delete");
        deleteJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteJButtonActionPerformed(evt);
            }
        });

        RefreshJButton.setBackground(new java.awt.Color(255, 255, 255));
        RefreshJButton.setText("Refresh");
        RefreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshJButtonActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Health Cost Directory");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        backBtn.setBackground(new java.awt.Color(255, 255, 255));
        backBtn.setText("<< Data Collector Work Area");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        btnExportData.setText("Export Data ");
        btnExportData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportDataActionPerformed(evt);
            }
        });

        viewBtn.setBackground(new java.awt.Color(255, 255, 255));
        viewBtn.setText("View");
        viewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(72, 72, 72)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(backBtn)
                        .addGap(169, 169, 169)
                        .addComponent(jLabel2))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(btnExportData)
                            .addGap(18, 18, 18)
                            .addComponent(RefreshJButton))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 721, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(createNewPatientDataJButton)
                            .addGap(18, 18, 18)
                            .addComponent(updateJButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(viewBtn)
                            .addGap(27, 27, 27)
                            .addComponent(deleteJButton))))
                .addContainerGap(70, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(backBtn))
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RefreshJButton)
                    .addComponent(btnExportData))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createNewPatientDataJButton)
                    .addComponent(deleteJButton)
                    .addComponent(viewBtn)
                    .addComponent(updateJButton))
                .addContainerGap(233, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void createNewPatientDataJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createNewPatientDataJButtonActionPerformed

        HospitalInfoWorkRequest request = new HospitalInfoWorkRequest();
        InfoProcessWorkRequestJPanel processWorkRequestJPanel = new InfoProcessWorkRequestJPanel(userProcessContainer, request, thcsEnterprise, network);
        userProcessContainer.add("processWorkRequestJPanel", processWorkRequestJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_createNewPatientDataJButtonActionPerformed

    private void updateJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateJButtonActionPerformed
        int selectedRow = HealthCostTable.getSelectedRow();

        if (selectedRow < 0){
            return;
        }

        String hospitalName = (String)HealthCostTable.getValueAt(selectedRow, 0);
        
        UpdateHealthCostRecordJPanel updateHealthCostRecordJPanel = new UpdateHealthCostRecordJPanel(userProcessContainer, network, this.thcsEnterprise.findHealthCost(hospitalName));
        userProcessContainer.add("updateHealthCostRecordJPanel", updateHealthCostRecordJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_updateJButtonActionPerformed

    private void RefreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshJButtonActionPerformed
        populateTable();
    }//GEN-LAST:event_RefreshJButtonActionPerformed

    private void deleteJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = HealthCostTable.getSelectedRow();
        String selectedHC = (String)HealthCostTable.getValueAt(selectedRow, 0);
        this.thcsEnterprise.deleteHealthCost(selectedHC);
        populateTable();
    }//GEN-LAST:event_deleteJButtonActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        DataCollectorWorkAreaJPanel pwajp = (DataCollectorWorkAreaJPanel) component;
        pwajp.populateWorkQueueTable();
        pwajp.populateHistoryTable();

        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backBtnActionPerformed

    private void btnExportDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportDataActionPerformed
        // TODO add your handling code here:
        DefaultTableModel dtm = (DefaultTableModel) HealthCostTable.getModel();
        XSSFWorkbook workbook = new XSSFWorkbook();
        XSSFSheet worksheet = workbook.createSheet();

        TreeMap<String, Object[]> dataMap = new TreeMap<>();
        dataMap.put("0", new Object[]{
            dtm.getColumnName(0), dtm.getColumnName(1), dtm.getColumnName(2), dtm.getColumnName(3), dtm.getColumnName(4),
            dtm.getColumnName(5), dtm.getColumnName(6), dtm.getColumnName(7)
        });

        for (int i = 0; i < dtm.getRowCount(); i++) {
            dataMap.put(i + 1 + "", new Object[]{
                dtm.getValueAt(i, 0).toString(),
                dtm.getValueAt(i, 1).toString(),
                dtm.getValueAt(i, 2).toString(),
                dtm.getValueAt(i, 3).toString(),
                dtm.getValueAt(i, 4).toString(),
                dtm.getValueAt(i, 5).toString(),
                dtm.getValueAt(i, 6).toString(),
                dtm.getValueAt(i, 7).toString()
            });
        }

        Set<String> ids = dataMap.keySet();
        XSSFRow row;
        int rowId = 0;

        XSSFCellStyle style = workbook.createCellStyle();
        XSSFFont font = workbook.createFont();
        font.setBoldweight(XSSFFont.BOLDWEIGHT_BOLD);
        style.setFont(font);

        for (String key : ids) {
            row = worksheet.createRow(rowId++);

            Object[] values = dataMap.get(key);

            int cellId = 0;
            for (Object o : values) {
                Cell cell = row.createCell(cellId++);
                cell.setCellValue((String) o);
                if (rowId== 1) {
                    cell.setCellStyle(style);
                }
            }
        }

        try {
            String date = new SimpleDateFormat("MM_dd_yyyy_HH_mm_ss").format(new Date());
            String fileName = "HCData_" + network.getName() + "_" + date + ".xlsx";
            //private static final String FILENAME = Paths.get("Databank.db4o").toAbsolutePath().toString();
            // FileOutputStream fos = new FileOutputStream(new File(System.getProperty("user.home") + "/Desktop/"+fileName));
            FileOutputStream fos = new FileOutputStream(new File("./"+fileName));
            workbook.write(fos);
            fos.close();
            JOptionPane.showMessageDialog(null, "Data exported to excel");
        } catch (FileNotFoundException fnfe) {
            // File Not Found
        } catch (IOException iex) {
            // IO Exception block
        }
    }//GEN-LAST:event_btnExportDataActionPerformed

    private void viewBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = HealthCostTable.getSelectedRow();

        if (selectedRow < 0){
            return;
        }

        String hospitalName = (String)HealthCostTable.getValueAt(selectedRow, 0);
        
        ViewHealthCostRecordJPanel viewHealthCostRecordJPanel = new ViewHealthCostRecordJPanel(userProcessContainer, network, this.thcsEnterprise.findHealthCost(hospitalName));
        userProcessContainer.add("viewHealthCostRecordJPanel", viewHealthCostRecordJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_viewBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable HealthCostTable;
    private javax.swing.JButton RefreshJButton;
    private javax.swing.JButton backBtn;
    private javax.swing.JButton btnExportData;
    private javax.swing.JButton createNewPatientDataJButton;
    private javax.swing.JButton deleteJButton;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton updateJButton;
    private javax.swing.JButton viewBtn;
    // End of variables declaration//GEN-END:variables
}
