/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.THCSDataCollectorRole;

import Business.Enterprise.Enterprise;
import Business.Enterprise.THCSEnterprise;
import Business.HealthCost.HealthCost;
import Business.Hospitals.HospitalDirectory;
import Business.Network.Network;
import Business.WorkQueue.HospitalInfoWorkRequest;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author mahitha
 */
public class InfoProcessWorkRequestJPanel extends javax.swing.JPanel {
    
    JPanel userProcessContainer;
    HospitalInfoWorkRequest request;
    private THCSEnterprise thcsEnterprise; 
    private Network network;
    
    private boolean consultationError = false;
    private boolean byPassSurgeryError = false;
    private boolean angioSugeryError = false;
    private boolean kneeSurgeryError = false;
    private boolean corneaSugeryError = false;
    private boolean mriScanError = false;
    private boolean eegError = false;
    private boolean ecgError = false;
    private boolean xrayError = false;
    private boolean fluVaccineError = false;
    private boolean hepAVaccineError = false;
    private boolean hepBVaccineError = false;
    private boolean hpvVaccineError = false;
    private boolean ipvVaccineError = false;
    private boolean mmRVaccineError = false;

    /**
     * Creates new form InfoProcessWorkRequestJPanel
     */
    public InfoProcessWorkRequestJPanel(JPanel userProcessContainer, HospitalInfoWorkRequest request, Enterprise enterprise, Network network) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.request = request;
        this.thcsEnterprise = (THCSEnterprise) enterprise;
        this.network = network;
        
        LocationNameLabel.setText(network.getName());
        populateHospitalComboBox();
        
    }
    
    private void populateHospitalComboBox(){
        ArrayList<String> hospitalsDirectory;
        HospitalDirectory hd = new HospitalDirectory();
        hospitalsDirectory = hd.getHospitalsFromEnterpriseDirectory(this.network);
        hospitalsDirectory.forEach((hospitalName) -> {
            
            boolean hospitalAlreadyExists = false;
            //check if hospital record already created
            
            for(HealthCost hc : this.thcsEnterprise.getHcDirectory()){
                if(hc.getHospitalName().equals(hospitalName)){
                    hospitalAlreadyExists = true;
                }
            }
            
            if(!hospitalAlreadyExists){
                hospitalsComboBox.addItem(hospitalName);
            }
            
        });
    }
    
    private void refreshForm(){
        hospitalsComboBox.removeAllItems();
        populateHospitalComboBox();
        txtFieldConsultationFee.setText("");
        txtFieldMRIcost.setText("");
        txtFieldEEGcost.setText("");
        txtFieldECGcost.setText("");
        txtFieldXRaycost.setText("");
        txtFieldHrtSurgery.setText("");
        txtFieldAngSurgery.setText("");
        txtFieldKRsurgery.setText("");
        txtFieldCorneaSurgery.setText("");
        txtFieldFluVaccine.setText("");
        txtFieldHptAVaccine.setText("");
        txtFieldHptBVaccine.setText("");
        txtFieldHPV.setText("");
        txtFieldIPV.setText("");
        txtFieldMMR.setText("");
        
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backJButton = new javax.swing.JButton();
        submitJButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtFieldConsultationFee = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        LocationNameLabel = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        hospitalsComboBox = new javax.swing.JComboBox<>();
        consultationErrorLabel = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        txtFieldKRsurgery = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtFieldAngSurgery = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtFieldHrtSurgery = new javax.swing.JTextField();
        txtFieldCorneaSurgery = new javax.swing.JTextField();
        heartErrorLabel = new javax.swing.JLabel();
        angioErrorLabel = new javax.swing.JLabel();
        kneeErrorLAbel = new javax.swing.JLabel();
        corneaErrorLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        txtFieldMRIcost = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtFieldEEGcost = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtFieldECGcost = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtFieldXRaycost = new javax.swing.JTextField();
        MRIErrorLabel = new javax.swing.JLabel();
        EEGErrorLabel = new javax.swing.JLabel();
        ECGErrorLabel = new javax.swing.JLabel();
        xrayErrorLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        txtFieldMMR = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        txtFieldIPV = new javax.swing.JTextField();
        txtFieldHptAVaccine = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        txtFieldFluVaccine = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        txtFieldHPV = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        txtFieldHptBVaccine = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        fluErrorLabel = new javax.swing.JLabel();
        hepBErrorLabel = new javax.swing.JLabel();
        hepAErrorLabel = new javax.swing.JLabel();
        hpvErrorLAbel = new javax.swing.JLabel();
        ipvErrorLabel = new javax.swing.JLabel();
        mmrErrorLabel = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 153, 204));

        backJButton.setBackground(new java.awt.Color(255, 255, 255));
        backJButton.setText("<< Health Costs Directory");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        submitJButton.setBackground(new java.awt.Color(255, 255, 255));
        submitJButton.setText("Submit");
        submitJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitJButtonActionPerformed(evt);
            }
        });

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Select Hospital:");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Consultation Fee:");
        jLabel3.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        txtFieldConsultationFee.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFieldConsultationFeeFocusLost(evt);
            }
        });

        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel19.setText("Location :");

        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel20.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel20.setText("Health Cost Form");
        jLabel20.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        consultationErrorLabel.setForeground(new java.awt.Color(204, 0, 51));

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("Heart Bypass Surgery:");
        jLabel9.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel12.setText("Cornea Surgery:");
        jLabel12.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        txtFieldKRsurgery.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFieldKRsurgeryFocusLost(evt);
            }
        });

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel11.setText("Knee Replacement Surgery:");
        jLabel11.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        txtFieldAngSurgery.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFieldAngSurgeryFocusLost(evt);
            }
        });

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("Angioplasty Surgery:");
        jLabel10.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        txtFieldHrtSurgery.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFieldHrtSurgeryFocusLost(evt);
            }
        });
        txtFieldHrtSurgery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFieldHrtSurgeryActionPerformed(evt);
            }
        });

        txtFieldCorneaSurgery.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFieldCorneaSurgeryFocusLost(evt);
            }
        });

        heartErrorLabel.setForeground(new java.awt.Color(204, 0, 51));

        angioErrorLabel.setForeground(new java.awt.Color(204, 0, 51));

        kneeErrorLAbel.setForeground(new java.awt.Color(204, 0, 51));

        corneaErrorLabel.setForeground(new java.awt.Color(204, 0, 51));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(42, 42, 42)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtFieldKRsurgery, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(txtFieldCorneaSurgery, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtFieldAngSurgery, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtFieldHrtSurgery, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(42, 42, 42)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(heartErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(angioErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(kneeErrorLAbel, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(corneaErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(43, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel9)
                        .addComponent(txtFieldHrtSurgery, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(heartErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel10)
                                            .addComponent(txtFieldAngSurgery, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(angioErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtFieldKRsurgery, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel11)))
                            .addComponent(kneeErrorLAbel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel12)
                                .addComponent(txtFieldCorneaSurgery, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(corneaErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(182, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Surgery", jPanel3);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("MRI cost:");
        jLabel4.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        txtFieldMRIcost.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFieldMRIcostFocusLost(evt);
            }
        });

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("EEG cost:");
        jLabel5.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        txtFieldEEGcost.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFieldEEGcostFocusLost(evt);
            }
        });

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("ECG cost:");
        jLabel6.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        txtFieldECGcost.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFieldECGcostFocusLost(evt);
            }
        });

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("X-Ray cost:");
        jLabel7.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        txtFieldXRaycost.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFieldXRaycostFocusLost(evt);
            }
        });
        txtFieldXRaycost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFieldXRaycostActionPerformed(evt);
            }
        });

        MRIErrorLabel.setForeground(new java.awt.Color(204, 0, 51));

        EEGErrorLabel.setForeground(new java.awt.Color(204, 0, 51));

        ECGErrorLabel.setForeground(new java.awt.Color(204, 0, 51));

        xrayErrorLabel.setForeground(new java.awt.Color(204, 0, 51));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtFieldEEGcost, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(47, 47, 47)
                                .addComponent(txtFieldMRIcost, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtFieldECGcost, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtFieldXRaycost, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addGap(49, 49, 49)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(MRIErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(EEGErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ECGErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(xrayErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(98, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4)
                                    .addComponent(txtFieldMRIcost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(MRIErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5)
                                    .addComponent(txtFieldEEGcost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(EEGErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtFieldECGcost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(ECGErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel7)
                        .addComponent(txtFieldXRaycost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(xrayErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(180, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Scans", jPanel1);

        txtFieldMMR.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFieldMMRFocusLost(evt);
            }
        });

        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel18.setText("MMR Vaccine:");
        jLabel18.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        txtFieldIPV.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFieldIPVFocusLost(evt);
            }
        });

        txtFieldHptAVaccine.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFieldHptAVaccineFocusLost(evt);
            }
        });
        txtFieldHptAVaccine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFieldHptAVaccineActionPerformed(evt);
            }
        });

        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel14.setText("Hepatitis A Vaccine:");
        jLabel14.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        txtFieldFluVaccine.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFieldFluVaccineFocusLost(evt);
            }
        });

        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel13.setText("Flu Vaccine:");
        jLabel13.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel17.setText("IPV Vaccine:");
        jLabel17.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        txtFieldHPV.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFieldHPVFocusLost(evt);
            }
        });

        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel16.setText("HPV Vaccine:");
        jLabel16.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        txtFieldHptBVaccine.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFieldHptBVaccineFocusLost(evt);
            }
        });
        txtFieldHptBVaccine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFieldHptBVaccineActionPerformed(evt);
            }
        });

        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel15.setText("Hepatitis B Vaccine:");
        jLabel15.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        fluErrorLabel.setForeground(new java.awt.Color(204, 0, 51));

        hepBErrorLabel.setForeground(new java.awt.Color(204, 0, 51));

        hepAErrorLabel.setForeground(new java.awt.Color(204, 0, 51));

        hpvErrorLAbel.setForeground(new java.awt.Color(204, 0, 51));

        ipvErrorLabel.setForeground(new java.awt.Color(204, 0, 51));

        mmrErrorLabel.setForeground(new java.awt.Color(204, 0, 51));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(txtFieldMMR, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtFieldIPV, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtFieldHPV, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtFieldHptBVaccine, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtFieldHptAVaccine, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtFieldFluVaccine, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fluErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hepBErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hepAErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hpvErrorLAbel, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ipvErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mmrErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(81, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(fluErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel14)
                                .addComponent(txtFieldHptAVaccine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(hepAErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtFieldHptBVaccine, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtFieldHPV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel16)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(hepBErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(hpvErrorLAbel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel17, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtFieldIPV, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel18)
                                    .addComponent(txtFieldMMR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(ipvErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(mmrErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel13)
                        .addComponent(txtFieldFluVaccine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Vaccines", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(42, 42, 42))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(backJButton)
                        .addGap(9, 9, 9)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(LocationNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(239, 239, 239)
                                .addComponent(jLabel20)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(347, 347, 347))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(hospitalsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtFieldConsultationFee, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(42, 42, 42)
                                .addComponent(consultationErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addComponent(jTabbedPane1)
                .addGap(89, 89, 89))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(submitJButton)
                .addGap(450, 450, 450))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(backJButton)
                    .addComponent(jLabel20))
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LocationNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hospitalsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtFieldConsultationFee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(consultationErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(submitJButton)
                .addContainerGap(266, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed

        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        HealthCostsDirectoryJPanel pwajp = (HealthCostsDirectoryJPanel) component;
        pwajp.populateTable();

        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void submitJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitJButtonActionPerformed
        
        if(txtFieldConsultationFee.getText().isEmpty() || txtFieldMRIcost.getText().isEmpty() || txtFieldEEGcost.getText().isEmpty() || txtFieldECGcost.getText().isEmpty()
                || txtFieldXRaycost.getText().isEmpty() || txtFieldHrtSurgery.getText().isEmpty() || 
                txtFieldAngSurgery.getText().isEmpty() || txtFieldKRsurgery.getText().isEmpty()
                    || txtFieldCorneaSurgery.getText().isEmpty() || txtFieldFluVaccine.getText().isEmpty() || txtFieldHptAVaccine.getText().isEmpty() || 
                txtFieldHptBVaccine.getText().isEmpty() || txtFieldHPV.getText().isEmpty() || txtFieldIPV.getText().isEmpty() || 
                txtFieldMMR.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "Please fill all the costs");
            return;
        }
           
        if(consultationError || byPassSurgeryError || angioSugeryError || kneeSurgeryError
                || corneaSugeryError || mriScanError || eegError || ecgError || xrayError
                    || fluVaccineError || hepAVaccineError || hepBVaccineError || hpvVaccineError || ipvVaccineError || mmRVaccineError){
            JOptionPane.showMessageDialog(null, "Please fill all the costs within specified range");
            return;
        }
        
        String hospitalname = (String)hospitalsComboBox.getSelectedItem();
          
        double consultFee = 0.0;
        consultFee = Double.parseDouble(txtFieldConsultationFee.getText());
        
        double mriCost = 0.0;
        mriCost = Double.parseDouble(txtFieldMRIcost.getText());
        
        double eegCost = 0.0;
        eegCost = Double.parseDouble(txtFieldEEGcost.getText());
        
        double ecgCost = 0.0;
        ecgCost = Double.parseDouble(txtFieldECGcost.getText());
        
        double xRayCost = 0.0;
        xRayCost = Double.parseDouble(txtFieldXRaycost.getText());
        
        double heartBypassCost = 0.0;
        heartBypassCost = Double.parseDouble(txtFieldHrtSurgery.getText());
        
        double angioplastyCost = 0.0;
        angioplastyCost = Double.parseDouble(txtFieldAngSurgery.getText());
        
        double krSurgery = 0.0;
        krSurgery = Double.parseDouble(txtFieldKRsurgery.getText());
        
        double corneaSurgery = 0.0;
        corneaSurgery = Double.parseDouble(txtFieldCorneaSurgery.getText());
        
        double fluVaccine = 0.0;
        fluVaccine = Double.parseDouble(txtFieldFluVaccine.getText());
        
        double hepatitisA = 0.0;
         hepatitisA = Double.parseDouble(txtFieldHptAVaccine.getText());
        
        double hepatitisB = 0.0;
        hepatitisB = Double.parseDouble(txtFieldHptBVaccine.getText());
        
        double hpvVaccine = 0.0;
         hpvVaccine = Double.parseDouble(txtFieldHPV.getText());
        
        double ipvVaccine = 0.0;
         ipvVaccine = Double.parseDouble(txtFieldIPV.getText());
        
        double mmrVaccine = 0.0;
         mmrVaccine = Double.parseDouble(txtFieldMMR.getText());
        
        
        HealthCost hc = new HealthCost();
        
       
        hc.setHospitalName(hospitalname);
        hc.setHospitalLocation(this.network.getName());
        hc.setConsultationFee(consultFee);
        hc.setMriCost(mriCost);
        hc.setxRayCost(xRayCost);
        hc.setEcgCost(ecgCost);
        hc.setEegCost(eegCost);
        hc.setHeartBypassSurgery(heartBypassCost);
        

        hc.setFluVaccine(fluVaccine);
        hc.setHPVvaccine(hpvVaccine);
        hc.setCorneaSurgery(corneaSurgery);
        hc.setHepatitisAVaccine(hepatitisA);
        hc.setHepatitisBVaccine(hepatitisB);
        hc.setAngioplastySurgery(angioplastyCost);
        hc.setIPVvaccine(ipvVaccine);
        hc.setKneeReplacementSurgery(krSurgery);
        hc.setMMRVaccine(mmrVaccine);
        
        this.thcsEnterprise.addHealthCosts(hc);
        
        JOptionPane.showMessageDialog(null, "Health cost info successfully submitted");
        refreshForm();
    }//GEN-LAST:event_submitJButtonActionPerformed

    private void txtFieldXRaycostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFieldXRaycostActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFieldXRaycostActionPerformed

    private void txtFieldHrtSurgeryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFieldHrtSurgeryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFieldHrtSurgeryActionPerformed

    private void txtFieldConsultationFeeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFieldConsultationFeeFocusLost
       
        if(txtFieldConsultationFee.getText().isEmpty()){
            consultationError = true;
        }
        else{
            
            double cost;
            try{
                cost = Double.parseDouble(txtFieldConsultationFee.getText());
            }catch(NumberFormatException e){
                consultationError = true;
                JOptionPane.showMessageDialog(null, "Please enter a valid float value for cost");
                return;
            }
           
            if (cost < 20){
                consultationError = true;
            }else{
                consultationError = false;
            }
        }
        
        
        if(consultationError){
            consultationErrorLabel.setText("Consultation Fee must be greater than 20$");
        }else{
            consultationErrorLabel.setText("");
        }
        
    }//GEN-LAST:event_txtFieldConsultationFeeFocusLost

    private void txtFieldFluVaccineFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFieldFluVaccineFocusLost
       
        if(txtFieldFluVaccine.getText().isEmpty()){
            fluVaccineError = true;
        }
        else{
            
            double cost;
            try{
                cost = Double.parseDouble(txtFieldFluVaccine.getText());
            }catch(NumberFormatException e){
                fluVaccineError = true;
                JOptionPane.showMessageDialog(null, "Please enter a valid float value for cost");
                return;
            }
           
            if (cost < 20){
                fluVaccineError = true;
            }else{
                fluVaccineError = false;
            }
        }
        
        
        if(fluVaccineError){
            fluErrorLabel.setText("Flu vaccine cost must be greater than 20$");
        }else{
            fluErrorLabel.setText("");
        }
        
       
    }//GEN-LAST:event_txtFieldFluVaccineFocusLost

    private void txtFieldHptAVaccineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFieldHptAVaccineActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFieldHptAVaccineActionPerformed

    private void txtFieldHptAVaccineFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFieldHptAVaccineFocusLost
        
        if(txtFieldHptAVaccine.getText().isEmpty()){
            hepAVaccineError = true;
        }
        else{
            
            double cost;
            try{
                cost = Double.parseDouble(txtFieldHptAVaccine.getText());
            }catch(NumberFormatException e){
                hepAVaccineError = true;
                JOptionPane.showMessageDialog(null, "Please enter a valid float value for cost");
                return;
            }
            
            if (cost < 20){
                hepAVaccineError = true;
            }else{
                hepAVaccineError = false;
            }
        }
        
        
        if(hepAVaccineError){
            hepAErrorLabel.setText("Hepatities A Vaccine cost must be greater than 20$");
        }else{
            hepAErrorLabel.setText("");
        }
    }//GEN-LAST:event_txtFieldHptAVaccineFocusLost

    private void txtFieldHptBVaccineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFieldHptBVaccineActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFieldHptBVaccineActionPerformed

    private void txtFieldHptBVaccineFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFieldHptBVaccineFocusLost
        
        if(txtFieldHptBVaccine.getText().isEmpty()){
            hepBVaccineError = true;
        }
        else{
            
            double cost;
            try{
                cost = Double.parseDouble(txtFieldHptBVaccine.getText());
            }catch(NumberFormatException e){
                hepBVaccineError = true;
                JOptionPane.showMessageDialog(null, "Please enter a valid float value for cost");
                return;
            }
            
            if (cost < 20){
                hepBVaccineError = true;
            }else{
                hepBVaccineError = false;
            }
        }
        
        
        if(hepBVaccineError){
            hepBErrorLabel.setText("Hepatities B Vaccine cost must be greater than 20$");
        }else{
            hepBErrorLabel.setText("");
        }
    }//GEN-LAST:event_txtFieldHptBVaccineFocusLost

    private void txtFieldHPVFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFieldHPVFocusLost
        if(txtFieldHPV.getText().isEmpty()){
            hpvVaccineError = true;
        }
        else{
            
            double cost;
            try{
                cost = Double.parseDouble(txtFieldHPV.getText());
            }catch(NumberFormatException e){
                hpvVaccineError = true;
                JOptionPane.showMessageDialog(null, "Please enter a valid float value for cost");
                return;
            }
            
            if (cost < 20){
                hpvVaccineError = true;
            }else{
                hpvVaccineError = false;
            }
        }
        
        
        if(hpvVaccineError){
            hpvErrorLAbel.setText("HPV Vaccine cost must be greater than 20$");
        }else{
            hpvErrorLAbel.setText("");
        }
    }//GEN-LAST:event_txtFieldHPVFocusLost

    private void txtFieldIPVFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFieldIPVFocusLost
        if(txtFieldIPV.getText().isEmpty()){
            ipvVaccineError = true;
        }
        else{
            
            double cost;
            try{
                cost = Double.parseDouble(txtFieldIPV.getText());
            }catch(NumberFormatException e){
                ipvVaccineError = true;
                JOptionPane.showMessageDialog(null, "Please enter a valid float value for cost");
                return;
            }
            
            if (cost < 20){
                ipvVaccineError = true;
            }else{
                ipvVaccineError = false;
            }
        }
        
        
        if(ipvVaccineError){
            ipvErrorLabel.setText("IPV Vaccine cost must be greater than 20$");
        }else{
            ipvErrorLabel.setText("");
        }
    }//GEN-LAST:event_txtFieldIPVFocusLost

    private void txtFieldMMRFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFieldMMRFocusLost
        if(txtFieldMMR.getText().isEmpty()){
            mmRVaccineError = true;
        }
        else{
            
            double cost;
            try{
                cost = Double.parseDouble(txtFieldMMR.getText());
            }catch(NumberFormatException e){
                mmRVaccineError = true;
                JOptionPane.showMessageDialog(null, "Please enter a valid float value for cost");
                return;
            }
            
            if (cost < 20){
                mmRVaccineError = true;
            }else{
                mmRVaccineError = false;
            }
        }
        
        
        if(mmRVaccineError){
            mmrErrorLabel.setText("MMR Vaccine cost must be greater than 20$");
        }else{
            mmrErrorLabel.setText("");
        }
    }//GEN-LAST:event_txtFieldMMRFocusLost

    private void txtFieldHrtSurgeryFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFieldHrtSurgeryFocusLost
        // TODO add your handling code here:
        if(txtFieldHrtSurgery.getText().isEmpty()){
            byPassSurgeryError = true;
        }
        else{
            
            double cost;
            try{
                cost = Double.parseDouble(txtFieldHrtSurgery.getText());
            }catch(NumberFormatException e){
                byPassSurgeryError = true;
                JOptionPane.showMessageDialog(null, "Please enter a valid float value for cost");
                return;
            }
            
            if (cost < 100){
                byPassSurgeryError = true;
            }else{
                byPassSurgeryError = false;
            }
        }
        
        
        if(byPassSurgeryError){
            heartErrorLabel.setText("Heart Surgery cost must be greater than 100$");
        }else{
            heartErrorLabel.setText("");
        }
    }//GEN-LAST:event_txtFieldHrtSurgeryFocusLost

    private void txtFieldAngSurgeryFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFieldAngSurgeryFocusLost
        if(txtFieldAngSurgery.getText().isEmpty()){
            angioSugeryError = true;
        }
        else{
            
            double cost;
            try{
                cost = Double.parseDouble(txtFieldAngSurgery.getText());
            }catch(NumberFormatException e){
                angioSugeryError = true;
                JOptionPane.showMessageDialog(null, "Please enter a valid float value for cost");
                return;
            }
            
            if (cost < 100){
                angioSugeryError = true;
            }else{
                angioSugeryError = false;
            }
        }
        
        
        if(angioSugeryError){
            angioErrorLabel.setText("Angioplasty Surgery cost must be greater than 100$");
        }else{
            angioErrorLabel.setText("");
        }
    }//GEN-LAST:event_txtFieldAngSurgeryFocusLost

    private void txtFieldKRsurgeryFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFieldKRsurgeryFocusLost
        if(txtFieldKRsurgery.getText().isEmpty()){
            kneeSurgeryError = true;
        }
        else{
            double cost;
            try{
                cost = Double.parseDouble(txtFieldKRsurgery.getText());
            }catch(NumberFormatException e){
                kneeSurgeryError = true;
                JOptionPane.showMessageDialog(null, "Please enter a valid float value for cost");
                return;
            }
            
            if (cost < 100){
                kneeSurgeryError = true;
            }else{
                kneeSurgeryError = false;
            }
        }
        
        
        if(kneeSurgeryError){
            kneeErrorLAbel.setText("Knee Replacement Surgery cost must be greater than 100$");
        }else{
            kneeErrorLAbel.setText("");
        }
    }//GEN-LAST:event_txtFieldKRsurgeryFocusLost

    private void txtFieldCorneaSurgeryFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFieldCorneaSurgeryFocusLost
        
        if(txtFieldCorneaSurgery.getText().isEmpty()){
            corneaSugeryError = true;
        }
        else{
            double cost;
            try{
                cost = Double.parseDouble(txtFieldCorneaSurgery.getText());
            }catch(NumberFormatException e){
                corneaSugeryError = true;
                JOptionPane.showMessageDialog(null, "Please enter a valid float value for cost");
                return;
            }
            
            if (cost < 100){
                corneaSugeryError = true;
            }else{
                corneaSugeryError = false;
            }
        }
        
        
        if(corneaSugeryError){
            corneaErrorLabel.setText("Cornea Surgery cost must be greater than 100$");
        }else{
            corneaErrorLabel.setText("");
        }
    }//GEN-LAST:event_txtFieldCorneaSurgeryFocusLost

    private void txtFieldMRIcostFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFieldMRIcostFocusLost
        if(txtFieldMRIcost.getText().isEmpty()){
            mriScanError = true;
        }
        else{
            
            double cost;
            try{
                cost = Double.parseDouble(txtFieldMRIcost.getText());
            }catch(NumberFormatException e){
                mriScanError = true;
                JOptionPane.showMessageDialog(null, "Please enter a valid float value for cost");
                return;
            }
            
            if (cost < 50){
                mriScanError = true;
            }else{
                mriScanError = false;
            }
        }
        
        
        if(mriScanError){
            MRIErrorLabel.setText("MRI Scan cost must be greater than 50$");
        }else{
            MRIErrorLabel.setText("");
        }
    }//GEN-LAST:event_txtFieldMRIcostFocusLost

    private void txtFieldEEGcostFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFieldEEGcostFocusLost
        
        if(txtFieldEEGcost.getText().isEmpty()){
            eegError = true;
        }
        else{
            
            double cost;
            try{
                cost = Double.parseDouble(txtFieldEEGcost.getText());
            }catch(NumberFormatException e){
                eegError = true;
                JOptionPane.showMessageDialog(null, "Please enter a valid float value for cost");
                return;
            }
            
            if (cost < 50){
                eegError = true;
            }else{
                eegError = false;
            }
        }
        
        
        if(eegError){
            EEGErrorLabel.setText("EEG cost must be greater than 50$");
        }else{
            EEGErrorLabel.setText("");
        }
    }//GEN-LAST:event_txtFieldEEGcostFocusLost

    private void txtFieldECGcostFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFieldECGcostFocusLost
       
        if(txtFieldECGcost.getText().isEmpty()){
            ecgError = true;
        }
        else{
            
            double cost;
            try{
                cost = Double.parseDouble(txtFieldECGcost.getText());
            }catch(NumberFormatException e){
                ecgError = true;
                JOptionPane.showMessageDialog(null, "Please enter a valid float value for cost");
                return;
            }
            
            if (cost < 50){
                ecgError = true;
            }else{
                ecgError = false;
            }
        }
        
        
        if(ecgError){
            ECGErrorLabel.setText("ECG cost must be greater than 50$");
        }else{
            ECGErrorLabel.setText("");
        }
    }//GEN-LAST:event_txtFieldECGcostFocusLost

    private void txtFieldXRaycostFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFieldXRaycostFocusLost
        
        if(txtFieldXRaycost.getText().isEmpty()){
            xrayError = true;
        }
        else{
            
            double cost;
            try{
                cost = Double.parseDouble(txtFieldXRaycost.getText());
            }catch(NumberFormatException e){
                xrayError = true;
                JOptionPane.showMessageDialog(null, "Please enter a valid float value for cost");
                return;
            }
            
            if (cost < 50){
                xrayError = true;
            }else{
                xrayError = false;
            }
        }
        
        
        if(xrayError){
            xrayErrorLabel.setText("X-Ray cost must be greater than 50$");
        }else{
            xrayErrorLabel.setText("");
        }
    }//GEN-LAST:event_txtFieldXRaycostFocusLost


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ECGErrorLabel;
    private javax.swing.JLabel EEGErrorLabel;
    private javax.swing.JLabel LocationNameLabel;
    private javax.swing.JLabel MRIErrorLabel;
    private javax.swing.JLabel angioErrorLabel;
    private javax.swing.JButton backJButton;
    private javax.swing.JLabel consultationErrorLabel;
    private javax.swing.JLabel corneaErrorLabel;
    private javax.swing.JLabel fluErrorLabel;
    private javax.swing.JLabel heartErrorLabel;
    private javax.swing.JLabel hepAErrorLabel;
    private javax.swing.JLabel hepBErrorLabel;
    private javax.swing.JComboBox<String> hospitalsComboBox;
    private javax.swing.JLabel hpvErrorLAbel;
    private javax.swing.JLabel ipvErrorLabel;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel kneeErrorLAbel;
    private javax.swing.JLabel mmrErrorLabel;
    private javax.swing.JButton submitJButton;
    private javax.swing.JTextField txtFieldAngSurgery;
    private javax.swing.JTextField txtFieldConsultationFee;
    private javax.swing.JTextField txtFieldCorneaSurgery;
    private javax.swing.JTextField txtFieldECGcost;
    private javax.swing.JTextField txtFieldEEGcost;
    private javax.swing.JTextField txtFieldFluVaccine;
    private javax.swing.JTextField txtFieldHPV;
    private javax.swing.JTextField txtFieldHptAVaccine;
    private javax.swing.JTextField txtFieldHptBVaccine;
    private javax.swing.JTextField txtFieldHrtSurgery;
    private javax.swing.JTextField txtFieldIPV;
    private javax.swing.JTextField txtFieldKRsurgery;
    private javax.swing.JTextField txtFieldMMR;
    private javax.swing.JTextField txtFieldMRIcost;
    private javax.swing.JTextField txtFieldXRaycost;
    private javax.swing.JLabel xrayErrorLabel;
    // End of variables declaration//GEN-END:variables
}
