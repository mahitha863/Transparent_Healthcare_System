/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.THCSDataCollectorRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.THCSEnterprise;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.Organization.THCSDataCollectorOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.HospitalInfoWorkRequest;
import Business.WorkQueue.WorkRequest;
import static com.sun.corba.se.spi.presentation.rmi.StubAdapter.request;
import java.awt.CardLayout;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author mahitha
 */
public class DataCollectorWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private EcoSystem business;
    private Network network;
    private UserAccount userAccount;
    private THCSDataCollectorOrganization dcOrganization;
    private THCSEnterprise thcsEnterprise;

    /**
     * Creates new form DataCollectorWorkAreaJPanel
     */
    public DataCollectorWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, Organization organization, EcoSystem business, Enterprise enterprise, Network network) {
        initComponents();

        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.business = business;
        this.network = network;
        this.dcOrganization = (THCSDataCollectorOrganization) organization;
        this.thcsEnterprise = (THCSEnterprise) enterprise;

        populateWorkQueueTable();
        populateHistoryTable();
    }

    public void populateWorkQueueTable() {
        DefaultTableModel model = (DefaultTableModel) workQUeueJTable.getModel();

        model.setRowCount(0);

        for (WorkRequest request : dcOrganization.getWorkQueue().getWorkRequestList()) {
            if (request.getStatus().equals("DC phase - TBA") || request.getStatus().equals("DC phase - WIP")) {
                Object[] row = new Object[5];
                row[0] = ((HospitalInfoWorkRequest) request).getRequestDate();
                row[1] = request.getMessage();
                row[2] = request.getSender().getEmployee().getName();
                row[3] = request.getReceiver() == null ? null : request.getReceiver().getEmployee().getName();
                row[4] = request.getStatus();

                model.addRow(row);
            }
        }
    }

    public void populateHistoryTable() {
        DefaultTableModel model = (DefaultTableModel) historyJTable.getModel();

        model.setRowCount(0);

        for (WorkRequest request : dcOrganization.getWorkQueue().getWorkRequestList()) {
            if (request.getStatus().equals("DA phase - TBA") || request.getStatus().equals("DA phase - WIP") || request.getStatus().equals("Completed")) {
                Object[] row = new Object[5];
                row[0] = ((HospitalInfoWorkRequest) request).getRequestDate();
                row[1] = request.getMessage();
                row[2] = request.getSender().getEmployee().getName();
                row[3] = request.getReceiver() == null ? null : request.getReceiver().getEmployee().getName();
                row[4] = request.getStatus();

                model.addRow(row);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        refreshWorkQueueBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        workQUeueJTable = new javax.swing.JTable();
        assignJButton = new javax.swing.JButton();
        hospitalDataDashboardJButton = new javax.swing.JButton();
        reqDataAnalysisBTn = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        refreshHistoryJButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        historyJTable = new javax.swing.JTable();

        setBackground(new java.awt.Color(0, 153, 204));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Data Collector Work Area");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        refreshWorkQueueBtn.setBackground(new java.awt.Color(255, 255, 255));
        refreshWorkQueueBtn.setText("Refresh");
        refreshWorkQueueBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshWorkQueueBtnActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Work Area(Active)");

        workQUeueJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Request created date", "Request Description", "Sender", "Receiver", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(workQUeueJTable);

        assignJButton.setBackground(new java.awt.Color(255, 255, 255));
        assignJButton.setText("Assign to me");
        assignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButtonActionPerformed(evt);
            }
        });

        hospitalDataDashboardJButton.setBackground(new java.awt.Color(255, 255, 255));
        hospitalDataDashboardJButton.setText("Health Costs Directory");
        hospitalDataDashboardJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hospitalDataDashboardJButtonActionPerformed(evt);
            }
        });

        reqDataAnalysisBTn.setBackground(new java.awt.Color(255, 255, 255));
        reqDataAnalysisBTn.setText("Request Data Analysis");
        reqDataAnalysisBTn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reqDataAnalysisBTnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(refreshWorkQueueBtn)
                .addGap(40, 40, 40))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(332, 332, 332)
                        .addComponent(jLabel3))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(assignJButton)
                            .addComponent(hospitalDataDashboardJButton)
                            .addComponent(reqDataAnalysisBTn, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(326, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(20, 20, 20)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 727, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(20, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel3)
                .addGap(6, 6, 6)
                .addComponent(refreshWorkQueueBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 207, Short.MAX_VALUE)
                .addComponent(assignJButton)
                .addGap(18, 18, 18)
                .addComponent(hospitalDataDashboardJButton)
                .addGap(18, 18, 18)
                .addComponent(reqDataAnalysisBTn)
                .addGap(58, 58, 58))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(92, 92, 92)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(215, Short.MAX_VALUE)))
        );

        jTabbedPane1.addTab("Work Queue", jPanel1);

        refreshHistoryJButton.setBackground(new java.awt.Color(255, 255, 255));
        refreshHistoryJButton.setText("Refresh");
        refreshHistoryJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshHistoryJButtonActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Work Area(History)");

        historyJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Request created date", "Request Description", "Sender", "Receiver", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(historyJTable);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addGap(319, 319, 319))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(665, 665, 665)
                        .addComponent(refreshHistoryJButton))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 727, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(11, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jLabel5)
                .addGap(39, 39, 39)
                .addComponent(refreshHistoryJButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(179, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("History", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(119, 119, 119)
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 788, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(399, 399, 399)
                        .addComponent(jLabel2)))
                .addContainerGap(271, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jLabel2)
                .addGap(39, 39, 39)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 511, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(99, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed

        int selectedRow = workQUeueJTable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a request");
            return;
        }

        //WorkRequest request = (WorkRequest) workQUeueJTable.getValueAt(selectedRow, 0);
        
        Date date = (Date) workQUeueJTable.getValueAt(selectedRow, 0);
        WorkRequest request = null;

        for (WorkRequest r : dcOrganization.getWorkQueue().getWorkRequestList()) {
            if (date == r.getRequestDate()) {
                request = r;
            }
        }
        request.setReceiver(userAccount);
        request.setStatus("DC phase - WIP");
        populateWorkQueueTable();
        populateHistoryTable();

    }//GEN-LAST:event_assignJButtonActionPerformed

    private void hospitalDataDashboardJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hospitalDataDashboardJButtonActionPerformed

        int selectedRow = workQUeueJTable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a request");
            return;
        }

        //Check whether any request is assigned to data collector
        //If not assigned show dialog with warning message
        //If assigned continue with entering data
        boolean assigned_to_me = false;

        Date date = (Date) workQUeueJTable.getValueAt(selectedRow, 0);
        WorkRequest request = null;

        for (WorkRequest r : dcOrganization.getWorkQueue().getWorkRequestList()) {
            if (date == r.getRequestDate()) {
                request = r;
            }
        }

        //WorkRequest request = (WorkRequest)workQUeueJTable.getValueAt(selectedRow, 0);
        if (request.getReceiver() == null || !request.getReceiver().equals(userAccount)) {
            assigned_to_me = false;
        } else {
            assigned_to_me = true;
        }

        if (assigned_to_me) {
            HealthCostsDirectoryJPanel healthCostsDirectoryJPanel = new HealthCostsDirectoryJPanel(userProcessContainer, userAccount, dcOrganization, business, thcsEnterprise, network);
            userProcessContainer.add("healthCostsDirectoryJPanel", healthCostsDirectoryJPanel);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        } else {
            JOptionPane.showMessageDialog(null, "Please assign a request to yourself before collecting data");
        }


    }//GEN-LAST:event_hospitalDataDashboardJButtonActionPerformed

    private void reqDataAnalysisBTnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reqDataAnalysisBTnActionPerformed

        int selectedRow = workQUeueJTable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a request");
            return;
        }

        //If req is DC phase - WIP and records exists in health record directory req can be transferred to DA 
        //WorkRequest request = (WorkRequest) workQUeueJTable.getValueAt(selectedRow, 0);
        
        Date date = (Date) workQUeueJTable.getValueAt(selectedRow, 0);
        WorkRequest request = null;

        for (WorkRequest r : dcOrganization.getWorkQueue().getWorkRequestList()) {
            if (date == r.getRequestDate()) {
                request = r;
            }
        }
        if ((request.getStatus().equals("DC phase - WIP")) && (thcsEnterprise.getHcDirectory().size() > 0)) {
            request.setStatus("DA phase - TBA");
            populateWorkQueueTable();
            populateHistoryTable();
        } else {
            JOptionPane.showMessageDialog(null, "Request not processed by Data Collector or No Health Cost Records Exists");
            return;
        }

    }//GEN-LAST:event_reqDataAnalysisBTnActionPerformed

    private void refreshWorkQueueBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshWorkQueueBtnActionPerformed
        populateWorkQueueTable();
    }//GEN-LAST:event_refreshWorkQueueBtnActionPerformed

    private void refreshHistoryJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshHistoryJButtonActionPerformed
        populateHistoryTable();
    }//GEN-LAST:event_refreshHistoryJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignJButton;
    private javax.swing.JTable historyJTable;
    private javax.swing.JButton hospitalDataDashboardJButton;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton refreshHistoryJButton;
    private javax.swing.JButton refreshWorkQueueBtn;
    private javax.swing.JButton reqDataAnalysisBTn;
    private javax.swing.JTable workQUeueJTable;
    // End of variables declaration//GEN-END:variables
}
